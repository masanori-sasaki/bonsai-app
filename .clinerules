# Bonsai App 開発ルール

このファイルは、Bonsai App（盆栽管理アプリ）の開発を進める際のルールと注意点をまとめたものです。

## アプリケーション概要

Bonsai Appは、盆栽の管理を支援するWebアプリケーションです。主な機能は以下の通りです：

- **ユーザー認証**: ID/パスワードによるログイン機能
- **盆栽管理**: 盆栽の登録、編集、一覧表示、詳細表示
- **作業記録**: 剪定、植替え、水やり、肥料などの作業記録の管理
- **作業予定**: 今後の作業予定の管理
- **画像管理**: 盆栽や作業の画像アップロード、表示機能

## データモデル概要

- **User**: ユーザー情報（ID、メール、名前など）
- **Bonsai**: 盆栽情報（名前、樹種、登録日、来歴、画像URLなど）
- **WorkRecord**: 作業記録（盆栽ID、作業タイプ、日付、説明、画像URLなど）
- **WorkSchedule**: 作業予定（盆栽ID、作業タイプ、予定日、説明、完了フラグなど）

## 環境設定

- **Node.js**: v16.x以上を使用
- **Angular**: v13.x を使用
- **AWS CLI**: 最新版を使用
- **開発環境**: Windows/Mac/Linux対応

## コマンド実行時の注意点

### Windows環境での注意点

1. **ディレクトリ作成**:
   - ❌ `mkdir -p path/to/directory` (Linuxスタイル)
   - ✅ `mkdir path\to\directory` (Windowsスタイル)
   - 深いディレクトリ構造を作成する場合は、親ディレクトリから順に作成する

2. **コマンド連結**:
   - ❌ `command1 && command2` (Linuxスタイル)
   - ✅ `command1; command2` (Windowsスタイル)
   - または 個別にコマンドを実行する

3. **パス区切り文字**:
   - ❌ `/` (Linuxスタイル)
   - ✅ `\` (Windowsスタイル)
   - ただし、package.jsonのスクリプトなど一部の場合は `/` を使用

### クロスプラットフォーム対応

- **npm scripts**: package.jsonのscriptsセクションでクロスプラットフォーム対応のコマンドを定義する
- **パス操作**: Node.jsの`path`モジュールを使用してパスを操作する
- **シェルスクリプト**: 必要に応じて`cross-env`や`rimraf`などのクロスプラットフォームパッケージを使用する

## プロジェクト構造

```
bonsai-app/
├── .github/workflows/          # GitHub Actions CI/CD設定
├── docs/                       # ドキュメント
│   ├── design/                 # 設計ドキュメント
│   └── test/                   # テスト関連ドキュメント
├── infrastructure/             # インフラストラクチャコード
│   ├── cloudformation/         # CloudFormation テンプレート
│   └── scripts/                # デプロイスクリプト
├── server/                     # サーバーサイドコード
│   ├── src/                    # ソースコード
│   └── tests/                  # テストコード
└── client/                     # クライアントサイドコード (Angular)
    └── src/                    # ソースコード
```

## cline上での各工程の定義
1. **要件定義＆設計工程**
   - Planモードでユーザーの要求をインタビューして分析しシステム要件を洗い出す
   - 要件をユーザーが承認したらActモードに切り替え、featureブランチを作成し、システム要件をもとに設計関連ドキュメントを追記修正する
   - 設計関連ドキュメントが完成したら、コミットする
   - 設計関連ドキュメントをもとに、結合テストケースを作成する
   - 結合テストは `docs/test/` ディレクトリに記載する
   - 結合テストは設計をもとに、因子と水準を洗い出しペアワイズ法で２因子間を網羅する組み合わせテストケースを作成する

2. **製造工程**:
   - featureブランチにコミットされた設計関連ドキュメントをもとにTDDでコードを実装する
   - 製造とユニットテストを実行する
   - 完了したら、featureブランチをdevelopブランチにマージする

3. **結合テスト工程**:
   - テスト環境情報
      - /docs/test/.env
   - ログイン後、テストケースに従ってテストを実行する
   - 想定結果と実際の結果を比較し、テスト結果のレポートを作成する
   - 結合テストレポートの承認が得られたら開発完了
   
## 開発フロー
１. **ブランチ戦略**:
   - `main`: 本番環境用
   - `develop`: 開発環境用
   - 機能開発は `feature/機能名` ブランチで行う

2. **設計**:
   - 設計は `docs/design/` ディレクトリに記載する
   - 設計が完了してからその設計をもとにコードを実装する

3. **テスト駆動開発 (TDD)**:
   - Red: 失敗するテストを先に書く
   - Green: テストが通るように最小限のコードを実装する
   - Refactor: コードをリファクタリングする

4. **コミットメッセージ**:
   - 形式: `[コンポーネント] 変更内容`
   - 例: `[server] ユーザー認証機能の実装`



## AWS無料枠の制限

- **Lambda**: 毎月100万回の無料リクエスト、400,000 GB秒のコンピューティング時間
- **S3**: 5GBのストレージ、20,000 GET/月、2,000 PUT/月
  - フロントエンド用と画像保存用の2つのバケットに分けて使用
  - 画像は適切に圧縮してアップロードし、ストレージ使用量を最小化
- **DynamoDB**: 25GBのストレージ、読み込み/書き込みキャパシティユニットを最小設定
- **Cognito**: 50,000 MAU（月間アクティブユーザー）

## デプロイ手順

1. **環境変数の設定**:
   - AWS_ACCESS_KEY_ID
   - AWS_SECRET_ACCESS_KEY
   - AWS_REGION
   - ADMIN_EMAIL

2. **デプロイコマンド**:
   ```
   # mainブランチに対してプッシュすると本番環境にデプロイ
   git push origin main

   # developブランチに対してプッシュすると開発環境にデプロイ
   git push origin develop
   ```

## トラブルシューティング

1. **npm installエラー**:
   - node_modulesディレクトリを削除して再試行
   - package-lock.jsonを削除して再試行

2. **ビルドエラー**:
   - distディレクトリを削除して再試行
   - TypeScriptのバージョン互換性を確認

3. **デプロイエラー**:
   - AWS CLIの認証情報を確認
   - CloudFormationテンプレートの構文を検証

4. **画像アップロードエラー**:
   - S3バケットのCORS設定を確認
   - 画像は自動的に圧縮されます（2MB以上の画像も段階的圧縮アルゴリズムにより対応可能）
   - サポートする画像形式: JPG, PNG, GIF（アニメーションGIFは非推奨）, WebP（推奨：より効率的な圧縮が可能）

## 参考リンク

- [Angular公式ドキュメント](https://angular.io/docs)
- [AWS無料枠の詳細](https://aws.amazon.com/free/)
- [CloudFormationユーザーガイド](https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/)
- [DynamoDBデベロッパーガイド](https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/)
- [S3開発者ガイド](https://docs.aws.amazon.com/AmazonS3/latest/dev/Welcome.html)
- [盆栽管理の基本](https://www.bonsaiempire.com/basics/bonsai-care)

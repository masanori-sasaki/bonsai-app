name: Deploy

on:
  push:
    branches:
      - main
      - develop

jobs:
  build-test-deploy:
    name: Build, Test, and Deploy
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
      
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16.x'
      
      # Server
      - name: Install server dependencies
        working-directory: ./server
        run: npm ci
      
      - name: Test server
        working-directory: ./server
        run: npm test
      
      - name: Build server
        working-directory: ./server
        run: npm run build
      
      - name: Package Lambda
        working-directory: ./server
        run: |
          npm ci --production
          cp -r node_modules dist/
          cd dist
          zip -r ../lambda-package.zip .
      
      # Client
      - name: Install client dependencies
        working-directory: ./client
        run: npm ci
      
      - name: Test client
        working-directory: ./client
        run: npm test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
      
      # Deploy
      - name: Setup AWS CLI
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Set environment based on branch
        id: set-env
        run: |
          if [[ $GITHUB_REF == 'refs/heads/main' ]]; then
            echo "::set-output name=environment::prod"
          else
            echo "::set-output name=environment::dev"
          fi
      
      - name: Upload Lambda package and CloudFormation templates to S3
        run: |
          ENV=${{ steps.set-env.outputs.environment }}
          S3_BUCKET=bonsai-app-templates-171278323216
          REGION=${{ secrets.AWS_REGION }}
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          
          # Upload Lambda package to S3
          aws s3 cp server/lambda-package.zip s3://${S3_BUCKET}/${ENV}/lambda-package.zip
          
          # Upload templates to S3
          aws s3 cp infrastructure/cloudformation/main.yml s3://${S3_BUCKET}/main.yml
          
          # Update api.yml with timestamp and Lambda package S3 key
          cat infrastructure/cloudformation/api.yml | \
            sed "s/#{Timestamp}/${TIMESTAMP}/g" | \
            sed "s|S3Key: !Sub \${Environment}/lambda-package.zip|S3Key: \"${ENV}/lambda-package.zip\"|g" \
            > /tmp/api.yml
          aws s3 cp /tmp/api.yml s3://${S3_BUCKET}/api.yml
          
          # Upload other templates
          aws s3 cp infrastructure/cloudformation/auth.yml s3://${S3_BUCKET}/auth.yml
          aws s3 cp infrastructure/cloudformation/storage.yml s3://${S3_BUCKET}/storage.yml
          aws s3 cp infrastructure/cloudformation/monthly-report-scheduler.yml s3://${S3_BUCKET}/monthly-report-scheduler.yml
          
          echo "Lambda package and templates uploaded to S3 bucket: ${S3_BUCKET}"
      
      - name: Deploy CloudFormation stacks
        run: |
          ENV=${{ steps.set-env.outputs.environment }}
          ADMIN_EMAIL=${{ secrets.ADMIN_EMAIL }}
          
          # Deploy main stack
          aws cloudformation deploy \
            --template-file infrastructure/cloudformation/main.yml \
            --stack-name BonsaiAppStack-${ENV} \
            --parameter-overrides \
              Environment=${ENV} \
              AdminEmail=${ADMIN_EMAIL} \
            --capabilities CAPABILITY_IAM CAPABILITY_NAMED_IAM CAPABILITY_AUTO_EXPAND \
            --no-fail-on-empty-changeset
            
      - name: Wait for CloudFormation stack to complete
        run: |
          ENV=${{ steps.set-env.outputs.environment }}
          STACK_NAME=BonsaiAppStack-${ENV}
          
          echo "CloudFormationスタックの完了を待機しています..."
          aws cloudformation wait stack-create-complete --stack-name ${STACK_NAME} || true
          aws cloudformation wait stack-update-complete --stack-name ${STACK_NAME} || true
          
          # StorageStackの正確な名前を取得
          STORAGE_STACK_NAME=$(aws cloudformation list-stack-resources --stack-name ${STACK_NAME} --query "StackResourceSummaries[?ResourceType=='AWS::CloudFormation::Stack' && LogicalResourceId=='StorageStack'].PhysicalResourceId" --output text)
          
          if [ -n "$STORAGE_STACK_NAME" ]; then
            echo "StorageStackの完了を待機しています: ${STORAGE_STACK_NAME}"
            aws cloudformation wait stack-create-complete --stack-name ${STORAGE_STACK_NAME} || true
            aws cloudformation wait stack-update-complete --stack-name ${STORAGE_STACK_NAME} || true
          else
            echo "StorageStackが見つかりません。スキップします。"
          fi
      
      - name: Install infrastructure scripts dependencies
        working-directory: ./infrastructure/scripts
        run: npm install
      
      - name: Update frontend configuration
        working-directory: ./infrastructure/scripts
        run: |
          ENV=${{ steps.set-env.outputs.environment }}
          export ENVIRONMENT=${ENV}
          export STACK_NAME=BonsaiAppStack-${ENV}
          export AWS_REGION=${{ secrets.AWS_REGION }}
          node update-frontend-config.js
      
      - name: Build client
        working-directory: ./client
        run: npm run build -- --configuration=production
      
      - name: Get CloudFormation outputs
        id: cf-outputs
        run: |
          ENV=${{ steps.set-env.outputs.environment }}
          REGION=${{ secrets.AWS_REGION }}
          ACCOUNT_ID=$(aws sts get-caller-identity --query "Account" --output text)
          
          # Set frontend bucket name directly
          echo "::set-output name=frontend-bucket::bonsai-app-${ENV}-${ACCOUNT_ID}-${REGION}"
          
          # Get API Stack name
          API_STACK_NAME=$(aws cloudformation list-stack-resources --stack-name BonsaiAppStack-${ENV} --query "StackResourceSummaries[?ResourceType=='AWS::CloudFormation::Stack' && LogicalResourceId=='ApiStack'].PhysicalResourceId" --output text)
          
          # Get Lambda ARN from API Stack
          API_OUTPUTS=$(aws cloudformation describe-stacks --stack-name $API_STACK_NAME --query "Stacks[0].Outputs" --output json)
          echo "::set-output name=api-function::$(echo $API_OUTPUTS | jq -r '.[] | select(.OutputKey=="LambdaArn") | .OutputValue')"
      
      - name: Deploy Lambda function
        run: |
          aws lambda update-function-code \
            --function-name ${{ steps.cf-outputs.outputs.api-function }} \
            --zip-file fileb://server/lambda-package.zip
      
      - name: Deploy frontend to S3
        run: |
          aws s3 sync client/dist/bonsai-app-client s3://${{ steps.cf-outputs.outputs.frontend-bucket }} --delete

      - name: Invalidate CloudFront cache
        run: |
          ENV=${{ steps.set-env.outputs.environment }}
          REGION=${{ secrets.AWS_REGION }}
          STACK_NAME=BonsaiAppStack-${ENV}
          
          # StorageStackの正確な名前を取得
          STORAGE_STACK_NAME=$(aws cloudformation list-stack-resources --stack-name ${STACK_NAME} --query "StackResourceSummaries[?ResourceType=='AWS::CloudFormation::Stack' && LogicalResourceId=='StorageStack'].PhysicalResourceId" --output text)
          
          if [ -n "$STORAGE_STACK_NAME" ]; then
            echo "StorageStackから CloudFront Distribution IDを取得します: ${STORAGE_STACK_NAME}"
            # StorageStackの出力からCloudFront Distribution IDを取得
            DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name ${STORAGE_STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)
          else
            # フォールバック: メインスタックの出力からCloudFront Distribution IDを取得
            echo "StorageStackが見つかりません。メインスタックから CloudFront Distribution IDを取得します。"
            DISTRIBUTION_ID=$(aws cloudformation describe-stacks --stack-name ${STACK_NAME} --query "Stacks[0].Outputs[?OutputKey=='CloudFrontDistributionId'].OutputValue" --output text)
          fi
          
          if [ -n "$DISTRIBUTION_ID" ]; then
            echo "CloudFrontキャッシュを無効化します (Distribution ID: ${DISTRIBUTION_ID})"
            aws cloudfront create-invalidation --distribution-id ${DISTRIBUTION_ID} --paths "/*"
          else
            echo "CloudFront Distribution IDが見つかりません。キャッシュ無効化をスキップします。"
          fi
